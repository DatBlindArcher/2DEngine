package Snake;

import java.awt.Color;
import java.awt.event.KeyEvent;
import java.util.Random;

import game.engine.*;

public class Snake extends SquareCollider
{
	private SnakeSegment firstSegment;
	private SnakeSegment lastSegment;
	private int segments;
	private int direction;
	
	public void start()
	{
		GameObject segment = new GameObject("SnakeSegment", "Snake", new Component[] { new SnakeSegment(), new Image("Images/Square.png", 1, Color.green) });
		GameObject.create(segment, new Vector2(gameObject.transform.position.x, gameObject.transform.position.y + 40f), 0f);
		firstSegment = segment.getComponent(SnakeSegment.class);
		lastSegment = firstSegment;
		direction = 0;
		Time.deltaFixedTime = 0.2f;
		System.out.println(Time.deltaFixedTime);
		segments = 1;
		super.start();
	}
	
	public void update()
	{
		Vector2 lastPos = gameObject.transform.position.copy();

		if(Input.getKeyDown(KeyEvent.VK_W))
		{
			gameObject.transform.position.y -= 40f;
			firstSegment.move(lastPos);
			direction = 0;
			return;
		}
		
		if(Input.getKeyDown(KeyEvent.VK_S))
		{
			gameObject.transform.position.y += 40f;
			firstSegment.move(lastPos);
			direction = 1;
			return;
		}
		
		if(Input.getKeyDown(KeyEvent.VK_A))
		{
			gameObject.transform.position.x -= 40f;
			firstSegment.move(lastPos);
			direction = 2;
			return;
		}
		
		if(Input.getKeyDown(KeyEvent.VK_D))
		{
			gameObject.transform.position.x += 40f;
			firstSegment.move(lastPos);
			direction = 3;
			return;
		}
		
		super.update();
		super.collide();
	}
	
	public void fixedUpdate()
	{
		Vector2 lastPos = gameObject.transform.position.copy();
		
		switch(direction)
		{
		case 0:
			gameObject.transform.position.y -= 40f;
			firstSegment.move(lastPos);
			break;
		case 1:
			gameObject.transform.position.y += 40f;
			firstSegment.move(lastPos);
			break;
		case 2:
			gameObject.transform.position.x -= 40f;
			firstSegment.move(lastPos);
			break;
		case 3:
			gameObject.transform.position.x += 40f;
			firstSegment.move(lastPos);
			break;
		}
	}
	
	public void onGUI()
	{
		GUI.setColor(new Color(44, 234, 190, 255));
		GUI.label(new Rect(20, 130, 0, 0),"Score: " + segments);
	}
	
	public void onCollisionStart(Collider col)
	{
		super.onCollisionStart(col);
		
		if(col.gameObject.tag == "Apple")
		{
			GameObject segment = new GameObject("SnakeSegment", "Snake", new Component[] { new SnakeSegment(), new Image("Images/Square.png", 1, Color.green) });
			GameObject.create(segment, lastSegment.gameObject.transform.position, 0f);
			lastSegment.child = segment.getComponent(SnakeSegment.class);
			lastSegment = lastSegment.child;
			GameObject.destroy(col.gameObject);
			
			Random r = new Random();
			GameObject apple = new GameObject("Apple", "Apple", new Component[] { new Apple(), new Image("Images/Square.png", 0, Color.red) });
			GameObject.create(apple, new Vector2(r.nextInt(1000/40 - 2) * 40 + 40f, r.nextInt(800 / 40 - 2) * 40 + 40f), 0f);
			segments++;
		}
		
		else 
		{
			GameObject.destroy(gameObject);
			Game.instance.isRunning = false;
			
			try 
			{
				Game.application.stop();
			} 
			
			catch (Exception e) 
			{
				e.printStackTrace();
			}
		}
	}
}