package game.engine;

import java.awt.Graphics;
import java.awt.image.BufferedImage;

import javax.swing.ImageIcon;

public class Animator extends Component
{
	private String imagePath;
	private int width;
	private int height;
	private int frames;
	private int startIndex;
	private int speed;
	private Image imageComponent;
	private BufferedImage[] images;
	
	public Animator(String path, int width, int height, int frames, int startIndex, float speed)
	{
		imagePath = path;
		this.width = width;
		this.height = height;
		this.frames = frames;
		this.startIndex = startIndex;
	}
	
	public void start()
	{
		images = new BufferedImage[frames];
		imageComponent = gameObject.getComponent(Image.class);
		
		if(Image.loadedImages.containsKey(imagePath))
		{
			ImageIcon img = Image.loadedImages.get(imagePath);
			int column = (int)Math.floor(img.getIconWidth() / width);
			
			for(int i = startIndex; i < startIndex + frames; i++)
			{
				int x = i % column;
				int y = (int)Math.floor(i / column);
				images[i - startIndex] = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB_PRE);
				Graphics g = images[i - startIndex].createGraphics();
				img.paintIcon(null, g, x * width, y * height);
				g.dispose();
			}
			
			imageComponent.image = images[0];
		}
		
		else
		{
			try 
			{
				ImageIcon img = new ImageIcon(getClass().getResource(imagePath));
				int column = (int)Math.floor(img.getIconWidth() / width);
				
				for(int i = startIndex; i < startIndex + frames; i++)
				{
					int x = i % column;
					int y = (int)Math.floor(i / column);
					images[i - startIndex] = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB_PRE);
					Graphics g = images[i - startIndex].createGraphics();
					img.paintIcon(null, g, x * width, y * height);
					g.dispose();
				}
				
				imageComponent.image = images[0];
			} 
			
			catch (Exception e) 
			{
				System.out.println("Failed to load " + imagePath + ": " + e.getMessage());
			}
		}
	}
	
	public void update()
	{
		
	}
}