package game.engine;

import java.awt.Graphics;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.Dictionary;
import java.util.Enumeration;

public class GameObject
{
	public String name;
	public Transform transform;
	@SuppressWarnings("rawtypes")
	private Dictionary<Class, Component> components = new Hashtable<Class, Component>();
	
	public GameObject(String objectName, Component[] startComponents)
	{
		name = objectName;
		transform = new Transform();
		components.put(Transform.class, transform);
		
		for(int i = 0; i < startComponents.length; i++)
		{
			Component c = startComponents[i];
			components.put(c.getClass(), c);
		}
	}
	
	public void start()
	{
		for(Enumeration<Component> i = components.elements(); i.hasMoreElements();)
		{
			i.nextElement().start();
		}
	}
	
	public void stop()
	{
		for(Enumeration<Component> i = components.elements(); i.hasMoreElements();)
		{
			i.nextElement().stop();
		}
	}
	
	public void update()
	{
		for(Enumeration<Component> i = components.elements(); i.hasMoreElements();)
		{
			i.nextElement().update();
		}
	}
	
	public void fixedUpdate()
	{
		for(Enumeration<Component> i = components.elements(); i.hasMoreElements();)
		{
			i.nextElement().fixedUpdate();
		}
	}
	
	public void draw(Graphics g, Vector2 offset)
	{
		for(Enumeration<Component> i = components.elements(); i.hasMoreElements();)
		{
			i.nextElement().draw();
		}
	}
	
	@SuppressWarnings("rawtypes")
	public <T extends Component> T addComponent(T component)
	{
		Enumeration<Class> i = components.keys(); i.hasMoreElements();)
		{
			Class c = i.nextElement();
			
			if(c == component.getClass())
			{
				components.remove(c);
				break;
			}
		}
		
		components.put(component.getClass(), component);
		return component;
	}
	
	public <T extends Component> T getComponent(Class<T> type)
	{
		for (Component component : components) 
		{
	        if (component.getClass() == type) 
	        {
	        	return (T)component;
	        }
	    }
		
		return null;
	}
}