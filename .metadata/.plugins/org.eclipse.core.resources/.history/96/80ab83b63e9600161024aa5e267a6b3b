package game.engine;

import java.awt.event.KeyEvent;

public class CharacterController extends Component
{
	private float speed = 200f;
	private float x = 0;
	private float y = 0;
	
	public void update()
	{
		x = 0;
		y = 0;
		
		if(Input.getKey(KeyEvent.VK_UP) && Physics.raycast(transform.position, new Vector2(0f, -1f), 16f).length == 0)
		{
			y--;
		}
		
		if(Input.getKey(KeyEvent.VK_DOWN) && Physics.raycast(transform.position, new Vector2(0f, 1f), 16f).length == 0)
		{
			y++;
		}
		
		if(Input.getKey(KeyEvent.VK_LEFT) && Physics.raycast(transform.position, new Vector2(-1f, 0f), 16f).length == 0)
		{
			x--;
		}
		
		if(Input.getKey(KeyEvent.VK_RIGHT) && Physics.raycast(transform.position, new Vector2(1f, 0f), 16f).length == 0)
		{
			x++;
		}

		Vector2 direction = new Vector2(x, y).normalized().multiply(Time.deltaTime * speed);
		transform.position.add(direction);
	}
	
	public void onGUI()
	{
		super.onGUI();
		Physics.raycast(transform.position, new Vector2(0f, y), 16f);
		Physics.raycast(transform.position, new Vector2(x, 0f), 16f);
	}
	
	private boolean checkWall(Vector2 direction)
	{
		Vector2 inverse = new Vector2(direction.y, direction.x).multiply(32f);
		Vector2 inverse2 = inverse.multiply(-1f);
		inverse.add(transform.position);
		inverse2.add(transform.position);
		return Physics.raycast(transform.position, direction, 16f).length == 0 &&
				Physics.raycast(inverse, direction, 16f).length == 0 &&
				Physics.raycast(inverse2, direction, 16f).length == 0;
	}
}